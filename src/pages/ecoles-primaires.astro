---
import Base from "../layouts/Layout.astro";
import fs from "fs";
import yaml from "js-yaml";

// Load YAML
const ateliers = yaml.load(fs.readFileSync("./src/content/ateliers.yaml", "utf8"));

// Helpers
const frMonthYear = new Intl.DateTimeFormat("fr-FR", { month: "long", year: "numeric" });
const frMonthOnly = new Intl.DateTimeFormat("fr-FR", { month: "long" });

function sameDay(d1, d2) {
  return (
    d1.getFullYear() === d2.getFullYear() &&
    d1.getMonth() === d2.getMonth() &&
    d1.getDate() === d2.getDate()
  );
}

function formatDayFR(dayNum) {
  return dayNum === 1 ? "1<sup>er</sup>" : String(dayNum);
}

function formatDateFR(date) {
  const day = formatDayFR(date.getDate());
  const monthYear = frMonthYear.format(date);
  return `${day} ${monthYear}`;
}

function formatDateFRNoYear(date) {
  const day = formatDayFR(date.getDate());
  const month = frMonthOnly.format(date);
  return `${day} ${month}`;
}

// Flatten and filter
const ecolesPrimairesEvents = Object.values(ateliers)
  .flat()
  .filter((event) => event.href === "/ecoles-primaires")
  .map((event) => {
    const fromDate = new Date(event.from);
    const toDate = event.to ? new Date(event.to) : fromDate;

    let displayDate;
    if (sameDay(fromDate, toDate)) {
      displayDate = formatDateFRNoYear(fromDate);
    } else if (
      fromDate.getFullYear() === toDate.getFullYear() &&
      fromDate.getMonth() === toDate.getMonth()
    ) {
      displayDate = `${formatDayFR(fromDate.getDate())} → ${formatDayFR(
        toDate.getDate()
      )} ${frMonthOnly.format(toDate)}`;
    } else if (fromDate.getFullYear() === toDate.getFullYear()) {
      displayDate = `${formatDateFRNoYear(fromDate)} → ${formatDateFRNoYear(toDate)}`;
    } else {
      displayDate = `${formatDateFR(fromDate)} → ${formatDateFR(toDate)}`;
    }

    const multiYear = fromDate.getFullYear() !== toDate.getFullYear();

    return {
      ...event,
      fromDate,
      toDate,
      displayDate,
      multiYear,
      key: event.from + event.titre + event.lieu,
    };
  });

// Group by year (all years in span) and sort
const grouped = ecolesPrimairesEvents.reduce((acc, event) => {
  const startYear = event.fromDate.getFullYear();
  const endYear = event.toDate.getFullYear();

  for (let year = startYear; year <= endYear; year++) {
    acc[year] = acc[year] || [];
    acc[year].push(event);
  }
  return acc;
}, {});

// Sort events within each year by fromDate then toDate
for (const year in grouped) {
  grouped[year].sort((a, b) => {
    if (a.fromDate.getTime() !== b.fromDate.getTime()) {
      return b.fromDate - a.fromDate; // plus anciens en bas
    }
    return b.toDate - a.toDate;
  });
}

const eventsByYear = Object.entries(grouped).sort(
  ([yearA], [yearB]) => yearB - yearA
);
---

<Base title="Ateliers pour écoles primaires">
  <main class="mx-auto max-w-[735px] mt-14">
    <h1 class="text-3xl font-bold mb-6">
      Ateliers de calligraphie et culture chinoise pour enfants
    </h1>

    <h2 class="text-2xl font-semibold mb-4">
      Mes formats d'atelier pour les écoles primaires sur le temps scolaire
    </h2>

    <img
      src="/assets/cours-calligraphie-ecoles-primaires.webp"
      alt="Cours de calligraphie écoles primaires"
      class="w-full max-w-xl mb-6 rounded shadow"
    />

    <div class="overflow-x-auto">
      <table class="min-w-full border border-gray-300 divide-y divide-gray-200">
        <thead class="bg-gray-100">
          <tr>
            <th class="px-4 py-2 text-left font-medium text-gray-700">Jours possibles</th>
            <th class="px-4 py-2 text-left font-medium text-gray-700">Du lundi au vendredi</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          <tr>
            <td class="px-4 py-2">Horaires</td>
            <td class="px-4 py-2">Entre 10 et 16 h</td>
          </tr>
          <tr class="bg-gray-50">
            <td class="px-4 py-2">Durée</td>
            <td class="px-4 py-2">Atelier de deux à trois heures minimum</td>
          </tr>
          <tr>
            <td class="px-4 py-2">Nombre de participants</td>
            <td class="px-4 py-2">30 enfants maximum</td>
          </tr>
          <tr class="bg-gray-50">
            <td class="px-4 py-2">Tarifs</td>
            <td class="px-4 py-2">60 euros HT l'heure</td>
          </tr>
          <tr>
            <td class="px-4 py-2">Programme</td>
            <td class="px-4 py-2">
              Découverte des pictogrammes chinois au pinceau<br />
              Salutations en chinois<br />
              Apprendre à dessiner à l'encre de Chine (Sumi-e) : animaux, fleurs...
            </td>
          </tr>
        </tbody>
      </table>
    </div>

    <h2 class="text-2xl font-semibold mt-10 mb-4">Interventions passées</h2>

    <!-- Navigation années -->
    <nav class="flex flex-wrap gap-4 mb-6">
      {eventsByYear.map(([year], idx) => (
        <button
          class={`year-btn px-4 py-2 rounded font-semibold transition-colors duration-300
            ${idx === 0 ? "bg-indigo-600 text-white" : "bg-gray-200 text-gray-800 hover:bg-gray-300"}`}
          data-year={year}
        >
          {year}
        </button>
      ))}
    </nav>

    <!-- Sections par année -->
    {eventsByYear.map(([year, events], idx) => (
      <section
        key={year}
        class={`year-section ${idx === 0 ? "" : "hidden"} mt-6`}
        data-year={year}
      >
        <ul class="space-y-4 mt-2">
          {events.map((event) => (
            <li
              key={event.key}
              class={`
                border-b pb-2
                odd:bg-gray-100
                ${
                  event.multiYear
                    ? "bg-indigo-100 text-indigo-900 font-semibold odd:bg-indigo-100"
                    : ""
                }
              `}
            >
              <strong set:html={event.displayDate}></strong> — {event.titre}
              <br />
              <em>{event.lieu}</em>
              {event.details && (
                <>
                  <br />
                  {event.details}
                </>
              )}
            </li>
          ))}
        </ul>
      </section>
    ))}

    <script>
      const yearButtons = document.querySelectorAll(".year-btn");

      yearButtons.forEach((btn) => {
        btn.addEventListener("click", () => {
          const year = btn.dataset.year;
          document.querySelectorAll(".year-section").forEach((sec) => {
            sec.classList.toggle("hidden", sec.dataset.year !== year);
          });
          yearButtons.forEach((b) => {
            b.classList.remove("bg-indigo-600", "text-white");
            b.classList.add("bg-gray-200", "text-gray-800");
          });
          btn.classList.add("bg-indigo-600", "text-white");
          btn.classList.remove("bg-gray-200", "text-gray-800");

          const section = document.querySelector(`.year-section[data-year='${year}']`);
          if (section) section.scrollIntoView({ behavior: "smooth", block: "start" });
        });
      });
    </script>
  </main>
</Base>
