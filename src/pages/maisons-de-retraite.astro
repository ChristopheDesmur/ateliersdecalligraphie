---
import Base from "../layouts/Layout.astro";
import fs from "fs";
import yaml from "js-yaml";

// Load YAML
const ateliers = yaml.load(fs.readFileSync("./src/content/ateliers.yaml", "utf8"));

// Helpers
const frMonthYear = new Intl.DateTimeFormat("fr-FR", { month: "long", year: "numeric" });
const frMonthOnly = new Intl.DateTimeFormat("fr-FR", { month: "long" });

function sameDay(d1, d2) {
  return (
    d1.getFullYear() === d2.getFullYear() &&
    d1.getMonth() === d2.getMonth() &&
    d1.getDate() === d2.getDate()
  );
}

function formatDayFR(dayNum) {
  return dayNum === 1 ? "1<sup>er</sup>" : String(dayNum);
}

function formatDateFR(date) {
  const day = formatDayFR(date.getDate());
  const monthYear = frMonthYear.format(date);
  return `${day} ${monthYear}`;
}

function formatDateFRNoYear(date) {
  const day = formatDayFR(date.getDate());
  const month = frMonthOnly.format(date);
  return `${day} ${month}`;
}

function formatDateRange(from, to) {
  if (sameDay(from, to)) {
    return formatDateFRNoYear(from);
  } else if (from.getFullYear() === to.getFullYear() && from.getMonth() === to.getMonth()) {
    return `${formatDayFR(from.getDate())} → ${formatDayFR(to.getDate())} ${frMonthOnly.format(to)}`;
  } else if (from.getFullYear() === to.getFullYear()) {
    return `${formatDateFRNoYear(from)} → ${formatDateFRNoYear(to)}`;
  } else {
    return `${formatDateFR(from)} → ${formatDateFR(to)}`;
  }
}

// Flatten all events and filter
const maisonRetraitesEvents = Object.values(ateliers)
  .flat()
  .filter((event) => event.href === "/maisons-de-retraite")
  .map((event) => {
    const fromDate = new Date(event.from);
    const toDate = event.to ? new Date(event.to) : fromDate;
    const multiYear = fromDate.getFullYear() !== toDate.getFullYear();
    return {
      ...event,
      fromDate,
      toDate,
      displayDate: formatDateRange(fromDate, toDate),
      uniqueKey: event.from + event.titre + event.lieu,
      multiYear,
    };
  })
  // Remove duplicates
  .filter((event, index, self) => index === self.findIndex((e) => e.uniqueKey === event.uniqueKey));

// Group by year range (multi-year included in all)
const eventsByYear = Object.entries(
  maisonRetraitesEvents.reduce((acc, event) => {
    const startYear = event.fromDate.getFullYear();
    const endYear = event.toDate.getFullYear();

    for (let year = startYear; year <= endYear; year++) {
      acc[year] = acc[year] || [];
      acc[year].push(event);
    }
    return acc;
  }, {})
)
// Sort years descending
.sort(([yearA], [yearB]) => yearB - yearA)
.map(([year, events]) => [
  year,
  events.sort((a, b) =>
    a.fromDate - b.fromDate || a.toDate - b.toDate
  ),
]);
---

<Base title="Ateliers pour maisons de retraite et ÉPHAD">
  <main class="mx-auto max-w-[735px] mt-14">
    <h1 class="text-3xl font-bold mb-6">
      Ateliers de calligraphie pour le bien-être des seniors
    </h1>

    <h2 class="text-2xl font-semibold mb-4">
      Mes formats d'atelier pour les maisons de retraite et Éhpad
    </h2>

    <div class="overflow-x-auto">
      <table class="min-w-full border border-gray-300 divide-y divide-gray-200">
        <thead class="bg-gray-100">
          <tr>
            <th class="px-4 py-2 text-left font-medium text-gray-700">Horaires</th>
            <th class="px-4 py-2 text-left font-medium text-gray-700">Libres</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          <tr>
            <td class="px-4 py-2">Durée</td>
            <td class="px-4 py-2">2 heures minimum</td>
          </tr>
          <tr class="bg-gray-50">
            <td class="px-4 py-2">Nombre de participants</td>
            <td class="px-4 py-2">De 6 à 12</td>
          </tr>
          <tr>
            <td class="px-4 py-2">Tarifs</td>
            <td class="px-4 py-2">60 euros HT de l'heure</td>
          </tr>
        </tbody>
      </table>
    </div>

    <h2 class="text-2xl font-semibold mt-10 mb-4">Interventions passées</h2>

    {eventsByYear.map(([year, events]) => (
      <section>
        <details
          class="mb-4 year-section"
          open={eventsByYear[0][0] === year}
        >
          <summary class="cursor-pointer text-xl font-bold mt-6 mb-3">
            {year}
          </summary>
          <ul class="space-y-4 mt-2">
            {events.map((event) => (
              <li
                key={event.uniqueKey}
                class={`
                  border-b pb-2 
                  odd:bg-gray-100 
                  ${
                    event.multiYear
                      ? "bg-indigo-100 text-indigo-900 font-semibold odd:bg-indigo-100"
                      : ""
                  }
                `}
              >
                <strong set:html={event.displayDate}></strong> — {event.titre}
                <br />
                <em>{event.lieu}</em>
                {event.details && (
                  <>
                    <br />
                    {event.details}
                  </>
                )}
              </li>
            ))}
          </ul>
        </details>
      </section>
    ))}

    <script>
      // Accordion behavior: only one <details> open at a time
      document.addEventListener("DOMContentLoaded", () => {
        const detailsList = document.querySelectorAll(".year-section");
        detailsList.forEach((details) => {
          details.addEventListener("toggle", () => {
            if (details.open) {
              detailsList.forEach((other) => {
                if (other !== details) other.removeAttribute("open");
              });
            }
          });
        });
      });
    </script>
  </main>
</Base>
