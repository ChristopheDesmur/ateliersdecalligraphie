---
import Base from "../layouts/Layout.astro";
import fs from 'fs';
import yaml from 'js-yaml';

// --- Load YAML and normalize ---
const rawData = yaml.load(fs.readFileSync('./src/content/ateliers.yaml', 'utf8'));
const rawAteliers = Array.isArray(rawData)
  ? rawData
  : rawData && typeof rawData === 'object'
  ? Object.values(rawData).flat()
  : [];

// --- Date helpers ---
function sameDay(d1, d2) {
  return d1.getFullYear() === d2.getFullYear()
      && d1.getMonth() === d2.getMonth()
      && d1.getDate() === d2.getDate();
}

function formatDayFR(dayNum) {
  return dayNum === 1 ? "1<sup>er</sup>" : String(dayNum);
}

function formatDateFR(fromStr, toStr) {
  const from = new Date(fromStr);
  const to = toStr ? new Date(toStr) : from;

  const optionsMonthYear = { month: "long", year: "numeric" };

  const frDayFrom = formatDayFR(from.getDate());
  const frDayTo = toStr ? formatDayFR(to.getDate()) : null;

  if (sameDay(from, to)) {
    return `${frDayFrom} ${from.toLocaleDateString("fr-FR", optionsMonthYear)}`;
  } else if (from.getFullYear() === to.getFullYear() && from.getMonth() === to.getMonth()) {
    return `${frDayFrom} → ${frDayTo} ${to.toLocaleDateString("fr-FR", optionsMonthYear)}`;
  } else {
    return `${frDayFrom} ${from.toLocaleDateString("fr-FR", optionsMonthYear)} → ${frDayTo} ${to.toLocaleDateString("fr-FR", optionsMonthYear)}`;
  }
}

// --- Group ateliers by year ---
const ateliersByYear = {};
rawAteliers.forEach(event => {
  const from = new Date(event.from);
  const to = event.to ? new Date(event.to) : from;
  const multiYear = from.getFullYear() !== to.getFullYear();

  for (let y = from.getFullYear(); y <= to.getFullYear(); y++) {
    if (!ateliersByYear[y]) ateliersByYear[y] = [];
    const key = event.from + event.titre + event.lieu;
    if (!ateliersByYear[y].some(e => (e.from + e.titre + e.lieu) === key)) {
      ateliersByYear[y].push({
        ...event,
        multiYear,
        displayDate: formatDateFR(event.from, event.to)
      });
    }
  }
});

// --- Sort years descending ---
const sortedYears = Object.keys(ateliersByYear).sort((a, b) => Number(b) - Number(a));
---

<Base title="Christophe Desmur, calligraphe et traducteur littéraire du chinois">
  <main class="mx-auto max-w-[735px] mt-14">
    <h1 class="text-4xl lg:text-5xl font-bold lg:tracking-tight mt-1 lg:leading-tight">
      Christophe Desmur, calligraphe et traducteur littéraire du chinois
    </h1>
    <p class="text-lg mt-4 text-gray-600">
      Je suis calligraphe depuis plus de trente ans et m'intéresse particulièrement aux langues et civilisations asiatiques.
    </p>

    <p>
      Christophe Desmur, lyonnais de naissance, calligraphe, passionné par les langues et cultures du monde, je suis titulaire :
    </p>
    <ul class="list-disc pl-5">
      <li>d’un diplôme d’étude universitaire générale en langue et civilisation coréennes&nbsp;;</li>
      <li>d’une maîtrise de langue et civilisation chinoises&nbsp;;</li>
      <li>d’un master de traduction littéraire du chinois vers le français.</li>
    </ul>

    <img
      src="/assets/christophe-desmur-calligraphie-chinoise.webp"
      alt="Christophe Desmur, calligraphie chinoise à Lyon, en train de calligraphier."
      class="w-full max-w-[800px] h-auto"
    >

    <p>
      Je donne des cours de calligraphie et des cours de chinois individuels ou en groupe, aux enfants comme aux adultes, et j’anime également des stages (10 élèves maximum).
    </p>

    <h2 class="text-4xl lg:text-3xl font-bold text-gray-600 mt-10">Ateliers & interventions</h2>

    <!-- Navigation années -->
    <nav class="flex flex-wrap gap-4 mb-6">
      {sortedYears.map((annee, idx) => (
        <button
          class={`year-btn px-4 py-2 rounded font-semibold transition-colors duration-300
            ${idx === 0 ? 'bg-indigo-600 text-white' : 'bg-gray-200 text-gray-800 hover:bg-gray-300'}`}
          data-year={annee}
        >
          {annee}
        </button>
      ))}
    </nav>

    <!-- Sections par année -->
    {sortedYears.map((annee, idx) => (
      <section
        key={annee}
        class={`year-section ${idx === 0 ? '' : 'hidden'} mt-6`}
        data-year={annee}
      >
        <ul class="mt-4 space-y-2">
          {ateliersByYear[annee].map(event => (
            <li
              key={event.from + event.titre + event.lieu}
              class={`border-b pb-2 ${event.multiYear ? 'bg-yellow-100 font-semibold' : ''}`}
            >
              <strong set:html={event.displayDate}></strong>
              {" — "}
              {event.href ? (
                <a href={event.href} class="text-indigo-600 hover:underline">{event.titre}</a>
              ) : (
                event.titre
              )}
              <br />
              <em>{event.lieu}</em>
              {event.details && (<><br />{event.details}</>)}
            </li>
          ))}
        </ul>
      </section>
    ))}
  </main>

  <script>
    const yearButtons = document.querySelectorAll(".year-btn");

    yearButtons.forEach(btn => {
      btn.addEventListener("click", () => {
        const year = btn.dataset.year;
        document.querySelectorAll(".year-section").forEach(sec => {
          sec.classList.toggle("hidden", sec.dataset.year !== year);
        });
        yearButtons.forEach(b => {
          b.classList.remove("bg-indigo-600", "text-white");
          b.classList.add("bg-gray-200", "text-gray-800");
        });
        btn.classList.add("bg-indigo-600", "text-white");
        btn.classList.remove("bg-gray-200", "text-gray-800");

        const section = document.querySelector(`.year-section[data-year='${year}']`);
        if (section) section.scrollIntoView({ behavior: 'smooth', block: 'start' });
      });
    });
  </script>
</Base>
