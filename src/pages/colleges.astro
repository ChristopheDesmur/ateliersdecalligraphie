---
import Base from "../layouts/Layout.astro";
import fs from "fs";
import yaml from "js-yaml";

// Load YAML
const ateliers = yaml.load(
  fs.readFileSync("./src/content/ateliers.yaml", "utf8")
);

// --- Helpers ---
function sameDay(d1, d2) {
  return (
    d1.getFullYear() === d2.getFullYear() &&
    d1.getMonth() === d2.getMonth() &&
    d1.getDate() === d2.getDate()
  );
}

// Format day with French rules
function formatDayFR(dayNum, mode = "date") {
  if (dayNum !== 1) return String(dayNum);

  switch (mode) {
    case "date":
      return "1<sup>er</sup>"; // 1er janvier
    case "ordinal":
      return "1<sup>e</sup>"; // 1re édition
    default:
      return "1";
  }
}

// Format full date (with year)
function formatDateFR(date) {
  return `${formatDayFR(date.getDate(), "date")} ${date.toLocaleDateString(
    "fr-FR",
    { month: "long", year: "numeric" }
  )}`;
}

// Format date without year
function formatDateFRNoYear(date) {
  return `${formatDayFR(date.getDate(), "date")} ${date.toLocaleDateString(
    "fr-FR",
    { month: "long" }
  )}`;
}

// Format ranges
function formatDateRange(from, to) {
  if (sameDay(from, to)) {
    return formatDateFRNoYear(from);
  } else if (
    from.getFullYear() === to.getFullYear() &&
    from.getMonth() === to.getMonth()
  ) {
    return `${formatDayFR(from.getDate(), "date")} → ${formatDayFR(
      to.getDate(),
      "date"
    )} ${to.toLocaleDateString("fr-FR", { month: "long" })}`;
  } else if (from.getFullYear() === to.getFullYear()) {
    return `${formatDateFRNoYear(from)} → ${formatDateFRNoYear(to)}`;
  } else {
    return `${formatDateFR(from)} → ${formatDateFR(to)}`;
  }
}

// --- Flatten all events for collèges ---
const collegesEvents = Object.values(ateliers)
  .flat()
  .filter((event) => event.href === "/colleges")
  .map((event) => {
    const fromDate = new Date(event.from);
    const toDate = event.to ? new Date(event.to) : fromDate;

    const displayDate = formatDateRange(fromDate, toDate);
    const multiYear = fromDate.getFullYear() !== toDate.getFullYear();

    return {
      ...event,
      fromDate,
      toDate,
      displayDate,
      multiYear,
      uniqueKey: event.from + event.titre + event.lieu,
    };
  })
  // deduplicate
  .filter(
    (event, index, self) =>
      index === self.findIndex((e) => e.uniqueKey === event.uniqueKey)
  )
  // sort descending
  .sort((a, b) => b.toDate - a.toDate);

// Group by year
const eventsByYear = Object.entries(
  collegesEvents.reduce((acc, event) => {
    const year = event.toDate.getFullYear();
    acc[year] = acc[year] || [];
    acc[year].push(event);
    return acc;
  }, {})
).sort(([yA], [yB]) => yB - yA);
---

<Base title="Ateliers pour collèges">
  <main class="mx-auto max-w-[735px] mt-14">
    <h1 class="text-3xl font-bold mb-6">
      Ateliers de calligraphie pour collèges : horaires, tarifs et organisation
    </h1>

    <h2 class="text-2xl font-semibold mb-4">Mes formats d'atelier pour les collèges</h2>

    <div class="overflow-x-auto">
      <table class="min-w-full border border-gray-300 divide-y divide-gray-200">
        <thead class="bg-gray-100">
          <tr>
            <th class="px-4 py-2 text-left font-medium text-gray-700">Horaires</th>
            <th class="px-4 py-2 text-left font-medium text-gray-700">Temps scolaire</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          <tr>
            <td class="px-4 py-2">Durée</td>
            <td class="px-4 py-2">2 à 3 heures</td>
          </tr>
          <tr class="bg-gray-50">
            <td class="px-4 py-2">Nombre de participants</td>
            <td class="px-4 py-2">25 élèves maximum</td>
          </tr>
          <tr>
            <td class="px-4 py-2">Tarifs</td>
            <td class="px-4 py-2">60 euros HT par heure</td>
          </tr>
        </tbody>
      </table>
    </div>

    <h2 class="text-2xl font-semibold mb-4 mt-8">Interventions passées</h2>

    {eventsByYear.map(([year, events], index) => (
      <section>
        <details
          class="mb-4 year-section"
          open={index === 0}   // expand most recent year by default
          onToggle={(e) => {
            if (e.currentTarget.open) {
              document
                .querySelectorAll(".year-section")
                .forEach((el) => {
                  if (el !== e.currentTarget) el.removeAttribute("open");
                });
            }
          }}
        >
          <summary class="cursor-pointer text-xl font-bold mt-6 mb-3">
            {year}
          </summary>
          <ul class="space-y-4 mt-2">
            {events.map((event) => (
              <li
                key={event.uniqueKey}
                class={`
                  border-b pb-2
                  odd:bg-gray-100
                  ${
                    event.multiYear
                      ? "bg-indigo-100 text-indigo-900 font-semibold odd:bg-indigo-100"
                      : ""
                  }
                `}
              >
                <strong set:html={event.displayDate}></strong> — {event.titre}
                <br />
                <em>{event.lieu}</em>
                {event.details && (
                  <>
                    <br />
                    {event.details}
                  </>
                )}
              </li>
            ))}
          </ul>
        </details>
      </section>
    ))}
  </main>
</Base>
